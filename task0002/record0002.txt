util.js
1.数组类型检测
typeof 操作符是用来区分基本类型和引用类型的
 typeof null//->'object',将null看成是一个空的引用类型
 typeof 'so'//->'string'
 typeof [] //-> 'object'
 typeof function(){} //->'function'
 typeof 1 //->'number'
 typeof undefined //->'undefined'
instanceof 用来检测对象是否由某个构造函数而来的
 [] instanceof Array //->true
 [] instanceof Object//->true
 var fn=function(){}
 fn instanceof Function//->true
 fn instanceof Object//->true
每个对象都有个constructor属性
 [].constructor === Array //->true
 fn.constructor === Function //->true
instanceof 和constructor在遇到跨域问题是不好使的
检测数组类型，EcmaScript 5 引入了一个Array.isArray()的方法
 Array.isArray([]) //->true
2.函数类型检测
简单的用typeof 来检测是不行的
  var fn = function(){};
  var hm = HTMLDocument;
  typeof fn //->'function'
  typeof hm //->'function'
用Object的toString方法也是不行的
 Object.prototype.toStirng.call(fn) //->'[object Function]'
 Object.prototype.toStirng.call(hm) //->'[object Function]'
而且像正则表达式和一些dom元素在不同的浏览器用typeof操作来检测也是返回的是'function',所以完美的解决方案
见：http://www.jb51.net/article/19841.htm
2.数组去重
 (1)要注意去掉空字符(若需要保留空字符串的话，可将对空字符串的限定去掉,此例中为arr[i]!=="")，以及!=(不等)与!==(不全等
 的区别，!==不全等)会比较值和其类型。
 (2)由于在IE6-8中数组的indexOf方法不起作用，因此还需要重写一个indexof方法
如：function indexOf(arr,item){
	for(var i=0,len=arr.length;i<len;i++){
		if(arr[i] === item){
			return i;
		}
	}
	return -1;
}
3.正则验证邮箱
 需要搞清楚邮箱的一般书写规则，此处是：字母或数字开头+字母、数字、点、减号或者下划线+@+域名+顶级域名，且位数限定为6-32个
4.获取元素的位置
 (1).在讨论元素的位置时，必须要弄清楚所相对的坐标是文档坐标还是视口坐标，所以一般情况下，在两个坐标系之间进行转换时，需要
 加上或减去滚动条的位置
 获取窗口滚动条的位置：
 function getScrollOffsets(w){
 	w = w || window;
 	//ie8+及其他
 	if(w.pageXOffset != null){
 		return {x:w.pageXOffset,y:w.pageYOffset}
 	}
 	var d = w.document;
 	//标准模式
 	if(document.compatMode == "CSS1Compat"){
 		return {x:d.documentElement.scrollLeft,y:d.documentElement.scrollTop};
 	}
 	//怪异模式
 	return {x:d.body.scrollLeft,y:d.body.scrollTop};
 }
 (2).getBoundingClientRect()方法返回元素在视口坐标的位置和尺寸，由IE5引入，为了转换成文档坐标需要加上滚动的偏移量
 (3).元素的offsetLeft和offsetHeight返回元素相对于文档坐标的位置，但除了被定位了的元素的后代元素和其他一些元素(如表单的单元格),
 利用这两个属性返回的是其相对于其父元素的坐标位置。所以要获取元素在文档坐标的位置要这样：
 funciton getElementPosition(e){
 	var x=0,y=0;
 	while(e != null){
 		x += e.offsetLeft;
 		y += e.offsetHeight;
 		e = e.offsetParent;
 	}
 	return {x:x,y:y}
 }
 (4).考虑到可滚动和元素的溢出情况，获取元素在视口坐标的位置要这样，它和getBoundingClientRect()的返回值是一样的
 function getElemtnPos(elt){
 	var x=0,y=0;
 	for(var e = elt;e != null; e = e.offsetParent){
 		x += e.offsetLeft;
 		y += e.offsetTop;
 	}
 	//循环元素的所有祖先元素，减去滚动条偏移量，转换为视口坐标
 	for(var e = elt.parentNode; e!=null && e.nodeType ==1;e=e.parentNode){
 		x -= e.scrollLeft;
 		y -= e.scrollTop;
 	}
 	return {x:x,y:y};
 }

 5.事件监听
 (1).addEventListener支持ie8+及其他，ie11也不支持,ie6-ie8支持attachEvent，但this的值会变为window对象，而不是某个元素，而onclick的方式所有浏览器都支持，但测试了下ie6中this的值指向的是html元素，跟attachEvent的类似。
 (2).*****给自制的$对象添加一些方法，使其为$.funcname(ele,event,listener)(例如：$.on(ele,event,fn))，直接$.on=addEvent；但为什么像$.prototype.on=addEvent不行，会报错：$.on is not a function;
 (3).*****关于事件代理，delegateEvent(element,tag,eventName,listener)传递的参数中似乎不需要listener，因为在父元素上已经绑定了事件监听，再在子元素绑定事件没有意义，而且经测试需要双击子元素才有效