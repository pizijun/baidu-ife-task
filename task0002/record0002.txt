util.js
1.数组类型检测
typeof 操作符是用来区分基本类型和引用类型的
 typeof null//->'object',将null看成是一个空的引用类型
 typeof 'so'//->'string'
 typeof [] //-> 'object'
 typeof function(){} //->'function'
 typeof 1 //->'number'
 typeof undefined //->'undefined'
instanceof 用来检测对象是否由某个构造函数而来的
 [] instanceof Array //->true
 [] instanceof Object//->true
 var fn=function(){}
 fn instanceof Function//->true
 fn instanceof Object//->true
每个对象都有个constructor属性
 [].constructor === Array //->true
 fn.constructor === Function //->true
instanceof 和constructor在遇到跨域问题是不好使的
检测数组类型，EcmaScript 5 引入了一个Array.isArray()的方法
 Array.isArray([]) //->true
2.函数类型检测
简单的用typeof 来检测是不行的
  var fn = function(){};
  var hm = HTMLDocument;
  typeof fn //->'function'
  typeof hm //->'function'
用Object的toString方法也是不行的
 Object.prototype.toStirng.call(fn) //->'[object Function]'
 Object.prototype.toStirng.call(hm) //->'[object Function]'
而且像正则表达式和一些dom元素在不同的浏览器用typeof操作来检测也是返回的是'function',所以完美的解决方案
见：http://www.jb51.net/article/19841.htm
2.数组去重
 (1)要注意去掉空字符(若需要保留空字符串的话，可将对空字符串的限定去掉,此例中为arr[i]!=="")，以及!=(不等)与!==(不全等
 的区别，!==不全等)会比较值和其类型。
 (2)由于在IE6-8中数组的indexOf方法不起作用，因此还需要重写一个indexof方法
如：function indexOf(arr,item){
	for(var i=0,len=arr.length;i<len;i++){
		if(arr[i] === item){
			return i;
		}
	}
	return -1;
}